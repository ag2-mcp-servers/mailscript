# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T04:51:39+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, Field, RootModel


class ActionCombine(BaseModel):
    createdAt: datetime
    createdBy: str
    id: str
    list: Optional[List[str]] = None
    name: str
    owner: str


class Config(BaseModel):
    html: Optional[str] = None
    subject: str
    text: Optional[str] = None
    type: str


class ActionSend(BaseModel):
    config: Config
    createdAt: datetime
    createdBy: str
    id: str
    name: str
    output: str
    owner: str


class Type(Enum):
    alias = 'alias'


class Config1(BaseModel):
    alias: Optional[str] = None
    type: Optional[Type] = None


class Type1(Enum):
    mailscript_email = 'mailscript-email'


class AddActionAliasRequest(BaseModel):
    config: Config1
    name: str
    type: Type1


class AddActionCombineRequest(BaseModel):
    list: List[str]
    name: str


class Config2(BaseModel):
    body: str
    daemon: Optional[str] = None


class Type2(Enum):
    daemon = 'daemon'


class AddActionDaemonRequest(BaseModel):
    config: Config2
    name: str
    type: Type2


class Type3(Enum):
    forward = 'forward'


class Config3(BaseModel):
    forward: str
    from_: str = Field(..., alias='from')
    key: str
    type: Type3


class Type4(Enum):
    mailscript_email = 'mailscript-email'


class AddActionForwardRequest(BaseModel):
    config: Config3
    name: str
    type: Type4


class Type5(Enum):
    replyAll = 'replyAll'


class Config4(BaseModel):
    from_: str = Field(..., alias='from')
    html: Optional[str] = None
    key: str
    text: Optional[str] = None
    type: Type5


class Type6(Enum):
    mailscript_email = 'mailscript-email'


class AddActionReplyAllRequest(BaseModel):
    config: Config4
    name: str
    type: Type6


class Type7(Enum):
    reply = 'reply'


class Config5(BaseModel):
    from_: str = Field(..., alias='from')
    html: Optional[str] = None
    key: str
    text: Optional[str] = None
    type: Type7


class Type8(Enum):
    mailscript_email = 'mailscript-email'


class AddActionReplyRequest(BaseModel):
    config: Config5
    name: str
    type: Type8


class AddActionResponse(BaseModel):
    id: str


class Type9(Enum):
    send = 'send'


class Config6(BaseModel):
    from_: str = Field(..., alias='from')
    html: Optional[str] = None
    key: str
    subject: str
    text: Optional[str] = None
    to: Optional[str] = None
    type: Optional[Type9] = None


class Type10(Enum):
    mailscript_email = 'mailscript-email'


class AddActionSendRequest(BaseModel):
    config: Config6
    name: str
    type: Type10


class Config7(BaseModel):
    number: str
    text: str


class Type11(Enum):
    sms = 'sms'


class AddActionSmsRequest(BaseModel):
    config: Config7
    name: str
    type: Type11


class Method(Enum):
    POST = 'POST'
    GET = 'GET'
    DELETE = 'DELETE'


class Opts(BaseModel):
    headers: Dict[str, Any]
    method: Method


class Config8(BaseModel):
    body: str
    opts: Opts
    url: str


class Type12(Enum):
    webhook = 'webhook'


class AddActionWebhookRequest(BaseModel):
    config: Config8
    name: str
    type: Type12


class AddAddressRequest(BaseModel):
    address: str


class AddDomainRequest(BaseModel):
    domain: str


class Type13(Enum):
    email = 'email'


class AddEmailVerificationRequest(BaseModel):
    email: str
    type: Type13


class AddKeyRequest(BaseModel):
    name: str
    read: bool
    write: bool


class AddKeyResponse(BaseModel):
    id: Optional[str] = None


class Type14(Enum):
    sms = 'sms'


class AddSmsVerificationRequest(BaseModel):
    sms: str
    type: Type14


class AddTriggerResponse(BaseModel):
    id: str


class AddVerificationResponse(BaseModel):
    id: str


class AddWorkflowRequest(BaseModel):
    action: str
    active: Optional[bool] = None
    input: str
    name: str
    trigger: Optional[str] = None


class AddWorkspaceRequest(BaseModel):
    workspace: str


class Address(BaseModel):
    createdAt: datetime
    createdBy: str
    displayName: Optional[str] = None
    id: str
    owner: str


class CheckDomainVerify(BaseModel):
    domain: str
    success: bool


class Criteria(BaseModel):
    domain: Optional[str] = None
    from_: Optional[str] = Field(None, alias='from')
    hasAttachments: Optional[bool] = None
    hasTheWords: Optional[str] = None
    sentTo: Optional[str] = None
    subjectContains: Optional[str] = None


class CriteriaOperand(BaseModel):
    and_: Optional[List[str]] = Field(None, alias='and')
    or_: Optional[List[str]] = Field(None, alias='or')


class Record(BaseModel):
    name: str
    type: str
    value: str


class DomainResponse(BaseModel):
    domain: str
    records: List[Record]


class ErrorResponse(BaseModel):
    error: str


class GetAllActionsResponse(BaseModel):
    list: List[Union[ActionSend, ActionCombine]]


class GetAllAddressesResponse(BaseModel):
    list: List[Address]


class GetAllDomainsResponse(BaseModel):
    id: Optional[List[str]] = None


class Type15(Enum):
    google = 'google'


class Integration(BaseModel):
    createdAt: datetime
    id: str
    type: Type15


class Key(BaseModel):
    createdAt: datetime
    createdBy: str
    id: str
    name: str
    read: bool
    write: bool


class KeyValuePair(BaseModel):
    key: str
    value: str


class Type16(Enum):
    mailescript_email = 'mailescript-email'


class MailscriptEmailInput(BaseModel):
    address: str
    createdAt: datetime
    createdBy: str
    id: str
    name: str
    owner: str
    type: Type16


class SendRequest(BaseModel):
    from_: str = Field(..., alias='from')
    html: Optional[str] = None
    subject: str
    text: Optional[str] = None
    to: str


class SetWorkflowRequest(BaseModel):
    id: Optional[str] = None
    pairs: Optional[List[KeyValuePair]] = None


class Trigger(BaseModel):
    createdAt: datetime
    createdBy: str
    criteria: Criteria
    displayName: Optional[str] = None
    id: str
    name: str
    owner: str


class UpdateKeyRequest(BaseModel):
    name: str
    read: bool
    write: bool


class UpdateUserRequest(BaseModel):
    displayName: str


class User(BaseModel):
    createdAt: datetime
    displayName: str
    email: str
    id: str
    photoURL: Optional[str] = None


class Type17(Enum):
    email = 'email'


class VerificationEmail(BaseModel):
    email: Optional[str] = None
    id: Optional[str] = None
    type: Optional[Type17] = None
    verified: Optional[bool] = None
    verifiedAt: Optional[datetime] = None
    verifiedBy: Optional[str] = None


class Type18(Enum):
    sms = 'sms'


class VerificationSms(BaseModel):
    id: Optional[str] = None
    sms: Optional[str] = None
    type: Optional[Type18] = None
    verified: Optional[bool] = None
    verifiedAt: Optional[datetime] = None
    verifiedBy: Optional[str] = None


class VerifyEmailRequest(BaseModel):
    code: str
    email: str


class VerifySmsRequest(BaseModel):
    code: str
    sms: str


class Workflow(BaseModel):
    action: str
    active: Optional[bool] = None
    createdAt: datetime
    createdBy: str
    id: str
    input: str
    name: str
    owner: str
    trigger: str


class Workspace(BaseModel):
    createdAt: datetime
    createdBy: str
    id: str
    owner: str


class ActionsPostRequest(
    RootModel[
        Union[
            AddActionCombineRequest,
            AddActionSmsRequest,
            AddActionWebhookRequest,
            AddActionDaemonRequest,
            AddActionSendRequest,
            AddActionForwardRequest,
            AddActionReplyRequest,
            AddActionReplyAllRequest,
            AddActionAliasRequest,
        ]
    ]
):
    root: Union[
        AddActionCombineRequest,
        AddActionSmsRequest,
        AddActionWebhookRequest,
        AddActionDaemonRequest,
        AddActionSendRequest,
        AddActionForwardRequest,
        AddActionReplyRequest,
        AddActionReplyAllRequest,
        AddActionAliasRequest,
    ]


class ActionsActionPutRequest(
    RootModel[
        Union[
            AddActionCombineRequest,
            AddActionSmsRequest,
            AddActionWebhookRequest,
            AddActionDaemonRequest,
            AddActionSendRequest,
            AddActionForwardRequest,
            AddActionReplyRequest,
            AddActionReplyAllRequest,
            AddActionAliasRequest,
        ]
    ]
):
    root: Union[
        AddActionCombineRequest,
        AddActionSmsRequest,
        AddActionWebhookRequest,
        AddActionDaemonRequest,
        AddActionSendRequest,
        AddActionForwardRequest,
        AddActionReplyRequest,
        AddActionReplyAllRequest,
        AddActionAliasRequest,
    ]


class DaemonsDaemonTokenGetResponse(BaseModel):
    token: str


class VerificationsPostRequest(
    RootModel[Union[AddEmailVerificationRequest, AddSmsVerificationRequest]]
):
    root: Union[AddEmailVerificationRequest, AddSmsVerificationRequest]


class VerificationsVerificationVerifyPostRequest(
    RootModel[Union[VerifyEmailRequest, VerifySmsRequest]]
):
    root: Union[VerifyEmailRequest, VerifySmsRequest]


class AddTriggerRequest(BaseModel):
    criteria: Union[Criteria, CriteriaOperand]
    name: str


class GetAllInputsResponse(BaseModel):
    list: List[MailscriptEmailInput]


class GetAllIntegrationsResponse(BaseModel):
    list: List[Integration]


class GetAllKeysResponse(BaseModel):
    list: List[Key]


class GetAllTriggersResponse(BaseModel):
    list: List[Trigger]


class GetAllVerificationsResponse(BaseModel):
    list: List[Union[VerificationEmail, VerificationSms]]


class GetAllWorkflowsResponse(BaseModel):
    list: List[Workflow]


class GetAllWorkspacesResponse(BaseModel):
    list: List[Workspace]
